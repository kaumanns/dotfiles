" Instructions for profiling in order tpandoc#folding#fastfoldso detect naughty plugins:
"
" :profile start profile.log
" :profile func *
" :profile file *
" (Do slow things)
" :profile pause
" :noautocmd qall!

" https://github.com/ggVGc/vim-fuzzysearch.git
" nnoremap / :FuzzySearch<CR>
" let g:fuzzysearch_prompt = '/'

call plug#begin('~/.vim/plugged')
" https://github.com/junegunn/vim-plug
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

Plug 'SirVer/ultisnips'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'christoomey/vim-tmux-navigator'
Plug 'junegunn/vim-easy-align'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'konfekt/fastfold'
Plug 'lifepillar/vim-solarized8'
Plug 'preservim/nerdtree'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-after'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'vim-syntastic/syntastic'
Plug 'xolox/vim-misc'  " for xolox plugins
Plug 'xolox/vim-session'
Plug 'ycm-core/Youcompleteme'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/airblade/vim-gitgutter

let g:gitgutter_max_signs = 500

let g:gitgutter_sign_added = '\'
let g:gitgutter_sign_modified = '|'
let g:gitgutter_sign_removed = '/'
let g:gitgutter_sign_removed_first_line = 'â€¾'
let g:gitgutter_sign_modified_removed = '|'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/SirVer/ultisnips

let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']

" let g:UltiSnipsExpandTrigger="<c-l>"

" Make Ultisnips work with YouCompleteMe:

function! g:UltiSnips_Complete()
  call UltiSnips#ExpandSnippet()
  if g:ulti_expand_res == 0
    if pumvisible()
      return "\<C-n>"
    else
      call UltiSnips#JumpForwards()
      if g:ulti_jump_forwards_res == 0
        return "\<TAB>"
      endif
    endif
  endif
  return ""
endfunction

function! g:UltiSnips_Reverse()
  call UltiSnips#JumpBackwards()
  if g:ulti_jump_backwards_res == 0
    return "\<C-P>"
  endif

  return ""
endfunction

if !exists("g:UltiSnipsJumpForwardTrigger")
  let g:UltiSnipsJumpForwardTrigger = "<tab>"
endif

if !exists("g:UltiSnipsJumpBackwardTrigger")
  let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
endif

au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
au InsertEnter * exec "inoremap <silent> " . g:UltiSnipsJumpBackwardTrigger . " <C-R>=g:UltiSnips_Reverse()<cr>"

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/christoomey/vim-tmux-navigator

let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_save_on_switch = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/kien/ctrlp.vim

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'

" Use the nearest .git directory as the cwd
" This makes a lot of sense if you are working on a project that is in version
" control. It also supports works with .svn, .hg, .bzr.
let g:ctrlp_working_path_mode = 'ra'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe " Windows

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|class|png|jpg|jpeg|html)$',
  \ 'link': 'some_bad_symbolic_links',
  \ }

" Make Ctrl-P a lot faster for Git projects
" Yields Command not found error
" let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
" let g:ctrlp_use_caching = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/vim-pandoc/vim-pandoc
" https://github.com/vim-pandoc/vim-pandoc-syntax
" https://github.com/vim-pandoc/vim-pandoc/blob/master/doc/pandoc.txt

" Set default for spell checking
let g:pandoc#spell#enabled = 1
let g:pandoc#spell#default_langs = [ 'en' ]

" Use FastFold instead
" let g:pandoc#modules#disabled = ['folding']
let g:pandoc#pandoc#folding#fastfolds = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/vim-pandoc/vim-pandoc-after.git
" Handles vim-pandoc's integration with third-party plugins.

let g:pandoc#after#modules#enabled = ["ultisnips"]
" let g:pandoc#after#modules#enabled = ["fastfold", "ultisnips"]

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/Konfekt/FastFold.git

" nmap zuz <Plug>(FastFoldUpdate)
" let g:fastfold_savehook = 1
" let g:fastfold_fold_command_suffixes =  ['x','X','a','A','o','O','c','C']
" let g:fastfold_fold_movement_commands = [']z', '[z', 'zj', 'zk']
"
" let g:fastfold_force = 1 "To prevent all fold methods
" let g:markdown_folding = 1
" let g:tex_fold_enabled = 1
" let g:vimsyn_folding = 'af'
" let g:xml_syntax_folding = 1
" "let g:javaScript_fold = 1 " uncommenting this will interrupt markdown/pandoc fold
" let g:sh_fold_enabled= 7
" let g:ruby_fold = 1
" let g:perl_fold = 1
" let g:perl_fold_blocks = 1
" let g:r_syntax_folding = 1
" let g:rust_fold = 1
" let g:php_folding = 1
"
" autocmd FileType pandoc
"       \ if exists('#EnableFastFolds') |
"       \   autocmd! EnableFastFolds |
"       \   augroup! EnableFastFolds |
"       \ endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/preservim/nerdtree
" https://github.com/Xuyuanp/nerdtree-git-plugin

nnoremap <leader>d :NERDTreeToggle<CR>

" Open a NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

let g:NERDTreeDirArrows=1
let g:NERDTreeShowHidden=1
let g:NERDTreeRespectWildIgnore=1
let g:NERDTreeCaseSensitiveSort=1
let g:NERDTreeMouseMode=3
let g:NERDTreeSize=25

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/junegunn/vim-easy-align

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/vim-syntastic/syntastic.git

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1            " automatically load errors into the location list
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1                       " check for errors when a file is loaded
let g:syntastic_check_on_wq = 0
let g:syntastic_yaml_checkers = [ "yamllint" ]
" let g:syntastic_quiet_messages = { "type": "style" }

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://github.com/xolox/vim-notes

" let g:notes_directories = ['~/Documents/Notes']
" let g:notes_suffix = '.txt'
" let g:notes_smart_quotes = 0

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Misc

set nocompatible " be iMproved, required

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Color

syntax enable " Enable sytnax highlighting

autocmd BufNewFile,BufRead *.pl set syntax=prolog
autocmd BufNewFile,BufRead *.md set syntax=pandoc

" set Vim-specific sequences for RGB colors
set termguicolors
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

set background=dark
autocmd vimenter * ++nested colorscheme solarized8_flat

" Enable file type detection
filetype plugin on
filetype plugin indent on

set autoread
set encoding=utf-8
set history=1000 " remember more commands and search history
set mouse=a
set nobackup
set noswapfile
set undolevels=1000 " use many muchos levels of undo
set wildignore+=*.swp,*.bak,*.pyc,*.class,*.git*,*.hg*,*.svn*,*/.DS_Store

set nospell
" set spell spelllang=en_us
" set spell spelllang=de_de

" Use yank and paste for clipboard content.
" Unnamed for primary selection buffer (middle-mouse), unnamedplus for clipboard buffer (ctrl-v)
set clipboard=unnamed,unnamedplus

" Extend runtimepath
set rtp+=~/.fzf

set virtualedit=all

" Add hyphen to word object definition
set iskeyword+=-

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Indentation and whitespace

set autoindent
set backspace=indent,eol,start
set indentexpr= " hopefully disables annoying auto-indent after carriage+return
set copyindent

" Tab behaviour
set expandtab " always uses spaces instead of tab characters
set shiftround
set shiftwidth=2
set smarttab " make tab insert indents instead of tabs at the beginning of a line
set softtabstop=2
set tabstop=2

" Tab behaviour per file type
autocmd FileType make setlocal noexpandtab
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab indentexpr=
autocmd FileType tex setlocal ts=2 sts=2 sw=2 expandtab

" Visualize tabs
set list
set listchars=tab:â–·â–·â‹®

" Remove trailing whitespaces at write
autocmd BufWritePre * :%s/\s\+$//e

" Keep visual selection when reindenting
xnoremap > >gv
xnoremap < <gv

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" User interface
"
" Visualize leading spaces
highlight LeadingWhitespaces ctermbg=Black
match LeadingWhitespaces /^\s\s*/

set cursorline " highlight current line
set laststatus=2 " make status line appear even without split
set noerrorbells " don't beep
set number " show line numbers
set showmatch " highlight matching [{()}]
set title " change the terminal's title
set visualbell " don't beep
set wildmenu " visual autocomplete for command menu

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding

set foldcolumn=0
set foldenable
set foldlevelstart=1
set foldnestmax=10
set foldmethod=syntax

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search & Replace

" set noincsearch " don't search as characters are entered
set hlsearch " highlight matches

" Clear the search buffer
nmap <silent> <leader>/ :noh<CR>

" Search & replace word under cursor with \s
nnoremap <Leader>s :%s/\<<C-r><C-w>\>//g<Left><Left>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Resize panes

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Disable pageup/pagedown keys

nnoremap <pageup> <nop>
nnoremap <pagedown> <nop>

inoremap <pageup> <nop>
inoremap <pagedown> <nop>

vnoremap <pageup> <nop>
vnoremap <pagedown> <nop>

